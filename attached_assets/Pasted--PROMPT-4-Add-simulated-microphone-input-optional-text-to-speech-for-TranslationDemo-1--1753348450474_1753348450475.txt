// ✅ PROMPT 4 — Add simulated microphone input + optional text-to-speech for TranslationDemo

// 1. Update CallerInput.tsx to include "Voice / Text" toggle and mic input

'use client';

import { useState } from 'react';

const presets = [
  "Someone is drowning at the beach near Muizenberg.",
  "My girlfriend just fell off a cliff at Lion’s Head.",
  "Floodwaters are rising fast in my neighborhood.",
  "Lightning struck a tree that fell on a car with people inside.",
  "There’s a violent protest and a fire being started near the municipal office.",
];

export function CallerInput({ onInput }: { onInput: (text: string) => void }) {
  const [text, setText] = useState('');
  const [mode, setMode] = useState<'text' | 'voice'>('text');
  const [recording, setRecording] = useState(false);

  const handleSelectPreset = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setText(e.target.value);
    onInput(e.target.value);
  };

  const handleMicInput = async () => {
    try {
      const recognition = new (window as any).webkitSpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setText(transcript);
        onInput(transcript);
        setRecording(false);
      };
      recognition.onerror = () => setRecording(false);
      setRecording(true);
      recognition.start();
    } catch (e) {
      alert('Voice input not supported in this browser.');
      setRecording(false);
    }
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-2">📞 Caller Input</h2>

      <div className="mb-2">
        <label className="mr-3 text-sm">Mode:</label>
        <button
          className={`px-2 py-1 rounded mr-2 ${mode === 'text' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
          onClick={() => setMode('text')}
        >
          Text
        </button>
        <button
          className={`px-2 py-1 rounded ${mode === 'voice' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
          onClick={() => setMode('voice')}
        >
          Voice
        </button>
      </div>

      {mode === 'text' ? (
        <>
          <textarea
            placeholder="Type your message..."
            className="w-full p-2 border rounded"
            rows={6}
            value={text}
            onChange={(e) => setText(e.target.value)}
          />
          <button
            className="mt-2 px-4 py-2 bg-blue-600 text-white rounded"
            onClick={() => onInput(text)}
          >
            Submit
          </button>
        </>
      ) : (
        <button
          className={`mt-2 px-4 py-2 rounded ${recording ? 'bg-red-600 text-white' : 'bg-green-600 text-white'}`}
          onClick={handleMicInput}
        >
          {recording ? 'Listening...' : '🎤 Start Voice Input'}
        </button>
      )}

      <div className="mt-4">
        <label className="block mb-1 text-sm font-medium">📚 Or choose a demo crisis:</label>
        <select
          className="w-full p-2 border rounded"
          value=""
          onChange={handleSelectPreset}
        >
          <option value="">— Select a scenario —</option>
          {presets.map((p, idx) => (
            <option key={idx} value={p}>
              {p}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
}

// 2. OPTIONAL: Add text-to-speech in ResponderOutput.tsx

'use client';

import { useState } from 'react';
import { translateFromEnglish } from '../utils/translate';

export function ResponderOutput({ input }: { input: string }) {
  const [language, setLanguage] = useState('Zulu');
  const [output, setOutput] = useState('');

  const handleOutput = async () => {
    const translated = await translateFromEnglish(
      `Crisis received. Help is being dispatched. ${input}`,
      language
    );
    setOutput(translated);
    speak(translated, language);
  };

  const speak = (text: string, lang: string) => {
    const synth = window.speechSynthesis;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = mapLang(lang);
    synth.speak(utter);
  };

  const mapLang = (lang: string) => {
    const mapping: Record<string, string> = {
      English: 'en-US',
      Afrikaans: 'af-ZA',
      Zulu: 'zu-ZA',
      Xhosa: 'xh-ZA',
      Sotho: 'st-ZA',
      Tswana: 'tn-ZA',
      Venda: 've-ZA',
      Tsonga: 'ts-ZA',
      Swati: 'ss-ZA',
      Ndebele: 'nr-ZA',
      'Northern Sotho': 'nso-ZA',
    };
    return mapping[lang] || 'en-US';
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-2">🧑‍🚒 Responder Output</h2>
      <label className="block mb-2">Select responder language:</label>
      <select
        value={language}
        onChange={(e) => setLanguage(e.target.value)}
        className="w-full p-2 border rounded mb-2"
      >
        {Object.keys(mapLang('')).map((lang) => (
          <option key={lang}>{lang}</option>
        ))}
      </select>
      <button
        className="px-4 py-2 bg-purple-600 text-white rounded"
        onClick={handleOutput}
      >
        Translate & Speak
      </button>
      <div className="mt-2 p-2 border rounded bg-gray-50 text-sm whitespace-pre-wrap">{output}</div>
    </div>
  );
}