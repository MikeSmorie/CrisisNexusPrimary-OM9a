// 🎯 PURPOSE: Prevent irrelevant or non-emergency utterances from being routed to responders
// FILES: /components/AITranslator.tsx, /lib/classifyIntent.ts, /api/process-voice.ts

✅ TASK 1 — Create lightweight intent classifier:
In `/lib/classifyIntent.ts`, add:

```ts
export function classifyIntent(text: string): "emergency" | "greeting" | "noise" | "unknown" {
  const t = text.toLowerCase();
  if (/help|fire|flood|injury|emergency|trapped|accident/.test(t)) return "emergency";
  if (/hello|hi|can you hear me|test|is this working/.test(t)) return "greeting";
  if (/hmmm+|uhhh+/.test(t)) return "noise";
  return "unknown";
}
```

✅ TASK 2 — In `process-voice.ts` or wherever voice input is handled:
Import and run this before generating AI output or translation:

```ts
import { classifyIntent } from "@/lib/classifyIntent";

const intent = classifyIntent(transcribedText);
if (intent !== "emergency") {
  // Route ONLY to AI Translator (middle frame) as internal echo/confirmation
  return res.json({ intent, routeToResponder: false, aiResponse: generateAcknowledgement(intent) });
} else {
  // Proceed with full AI translation and responder routing
  return res.json({ intent, routeToResponder: true, message: transcribedText });
}
```

✅ TASK 3 — Update `AITranslator.tsx`:
- Display `🔍 Interpreted Intent: greeting / emergency / unknown`
- Only show translation preview and send to responder if `routeToResponder === true`

✅ TASK 4 — Add fallback messages:
Create `generateAcknowledgement(intent: string)` to return:
```ts
{
  greeting: "Yes, I hear you. Please describe your emergency.",
  noise: "I'm listening, but I didn't catch that. Can you repeat clearly?",
  unknown: "Got it. Please share more details about your situation."
}
```

---

Once this is done, the system will:
- Echo casual/greeting phrases back to the **caller only**
- Block meaningless responses from going to **responders**
- Show intent awareness for demos/investors

Let me know once complete or if you’d like a versioned `.md` or `.pdf` export.
