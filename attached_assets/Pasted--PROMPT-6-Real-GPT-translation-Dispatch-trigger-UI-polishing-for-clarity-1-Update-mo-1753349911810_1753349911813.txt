// ✅ PROMPT 6 — Real GPT translation + Dispatch trigger + UI polishing for clarity

// 1. Update /modules/TranslationDemo/utils/translate.ts to use real OpenAI translation

// Ensure you have OPENAI_API_KEY in your environment secrets

export async function translateToEnglish(input: string): Promise<string> {
  try {
    const res = await fetch('/api/translate-to-english', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ input }),
    });
    const data = await res.json();
    return data.translated || '[Translation failed]';
  } catch (e) {
    return '[Translation error]';
  }
}

export async function translateFromEnglish(input: string, language: string): Promise<string> {
  try {
    const res = await fetch('/api/translate-from-english', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ input, targetLanguage: language }),
    });
    const data = await res.json();
    return data.translated || '[Translation failed]';
  } catch (e) {
    return '[Translation error]';
  }
}

export function getEDTG(): string {
  return new Date().toISOString();
}

// 2. Add API Routes under /app/api

// File: /app/api/translate-to-english/route.ts

import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function POST(req: NextRequest) {
  const { input } = await req.json();

  const completion = await openai.chat.completions.create({
    model: 'gpt-4',
    messages: [
      { role: 'system', content: 'Translate any language to English clearly and concisely.' },
      { role: 'user', content: input },
    ],
  });

  return NextResponse.json({ translated: completion.choices[0].message.content });
}

// File: /app/api/translate-from-english/route.ts

export async function POST(req: NextRequest) {
  const { input, targetLanguage } = await req.json();

  const completion = await openai.chat.completions.create({
    model: 'gpt-4',
    messages: [
      {
        role: 'system',
        content: `Translate the following message into ${targetLanguage} in a calm, clear tone. Do not include any English.`,
      },
      { role: 'user', content: input },
    ],
  });

  return NextResponse.json({ translated: completion.choices[0].message.content });
}

// 3. Update ResponderOutput.tsx with Dispatch Simulation + visual clarity

'use client';

import { useState } from 'react';
import { translateFromEnglish } from '../utils/translate';

export function ResponderOutput({ input }: { input: string }) {
  const [language, setLanguage] = useState('Zulu');
  const [output, setOutput] = useState('');
  const [dispatched, setDispatched] = useState(false);

  const handleOutput = async () => {
    const translated = await translateFromEnglish(
      `Crisis received. Help is being dispatched. ${input}`,
      language
    );
    setOutput(translated);
    setDispatched(false);
  };

  const handleDispatch = () => {
    setDispatched(true);
  };

  const languages = [
    'Zulu', 'Xhosa', 'Afrikaans', 'Tswana', 'Sotho',
    'Venda', 'Tsonga', 'Swati', 'Ndebele', 'Northern Sotho', 'English',
  ];

  return (
    <div className="h-full flex flex-col justify-between">
      <div>
        <h2 className="text-lg font-bold text-purple-800 mb-2">🧑‍🚒 Responder Output</h2>
        <label className="block mb-1 font-medium">Responder language:</label>
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className="w-full p-2 border rounded mb-3"
        >
          {languages.map((lang) => (
            <option key={lang}>{lang}</option>
          ))}
        </select>
        <button
          className="mb-2 px-4 py-2 bg-purple-600 text-white rounded"
          onClick={handleOutput}
        >
          Translate & Preview
        </button>
        <div className="bg-gray-100 p-3 rounded whitespace-pre-wrap text-sm mb-3">
          {output || 'Translated response will appear here…'}
        </div>
      </div>

      {output && (
        <div className="mt-2">
          <button
            className="w-full py-2 bg-green-700 text-white rounded"
            onClick={handleDispatch}
          >
            🚨 Dispatch to Responder
          </button>
          {dispatched && (
            <p className="mt-2 text-green-700 text-sm font-semibold">
              ✅ Message dispatched and logged successfully.
            </p>
          )}
        </div>
      )}
    </div>
  );
}

// 4. Final UI Cleanup for All Panels (TranslationDemo.tsx)

Wrap each panel in:
- 🟦 border-2 with role color coding
- Header label: “Victim Caller”, “AI Translator”, “Responder View”
- Sticky top heading for mobile view

You can use Tailwind classes:
- border-blue-400, border-indigo-500, border-purple-500
- sticky top-0 z-10 bg-white backdrop-blur-md shadow-sm